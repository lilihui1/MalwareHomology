package com.code.scut.service.Impl;

import com.code.scut.Predict.FileUtil;
import com.code.scut.Predict.Util;
import com.code.scut.common.JsonMessage;
import com.code.scut.dao.ResultMapper;
import com.code.scut.entity.Result;
import com.code.scut.service.ResultService;
import com.code.scut.utils.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @ClassName ResultServiceImpl
 * @Description 结果服务实现类
 * @Author lilihui
 * @Date 2020/4/2 16:28
 * @Version 1.0
 */
@Service
public class ResultServiceImpl implements ResultService {

    @Autowired
    private ResultMapper resultMapper;

    @Autowired
    private SaveAPIFileUtil saveAPIFileUtil;

    @Override
    public List<Result> getResultList(Map map) {
        List<Result> resultList = resultMapper.getResultList(map);
        return resultList;
    }

    @Override
    public Map familyPredict(Map map) {
        /**传入的参数值有：userId、sampleId、status、md5、apiMap*/
        Map resultMap = new HashMap();
        String families [];
        Result result = new Result();
        //首先取出md5和api，然后把api转成list
        String md5 = map.get("md5").toString();
        result.setMd5(md5);
        Integer userId = (Integer) map.get("userId");
        result.setUserId(userId);
        Integer sampleId = (Integer) map.get("sampleId");
        result.setSampleId(sampleId);


        //resultMap.put("md5",md5);
        Map apiMap = (Map) map.get("apiMap");

        String predictedFamily;
        if (!apiMap.isEmpty()){
            //转成list
            List<String> apiList = CovertAPIToListUtil.covertAPI(apiMap);
            if (!apiList.isEmpty()){
                //预测家族
                predictedFamily = Util.predict(apiList);
                result.setPredictedFamily(predictedFamily);
                resultMap.put("predictedFamily",predictedFamily);
                //保存相似度、行为树和行为特征
                /**相似度的话就是读取本地文件*/
                String fileContent1 = FileUtil.readFile("familySimilarity.txt");
                //去除.txt
                String regEx = "(.txt){0,}";
                Pattern p = Pattern.compile(regEx);
                Matcher m = p.matcher(fileContent1);
                String fileContent = m.replaceAll("").trim();

                Map<String,Double> familySimilarity = new HashMap<>();
                families = fileContent.split(";");
                for (String family:families){
                    String arr[] =family.split(">");
                    familySimilarity.put(arr[0],Double.parseDouble(arr[1]));
                }
                //相似度：
                String familySimilarityPath = saveAPIFileUtil.writeObjectFile(familySimilarity,sampleId,"familySimilarity");
                resultMap.put("familySimilarityPath",familySimilarityPath);
                result.setFamilySimilarity(familySimilarityPath);
                //处理行为树
                Map treeMap = ReadFileUtil.readSampleAPIFile("processTree.txt");
                String treePath = saveAPIFileUtil.writeObjectFile(treeMap,sampleId,"tree");
                resultMap.put("treePath",treePath);
                result.setTreeJsonPath(treePath);
                //处理样本的行为特征
                //家族的特征
                Set<String> familyBehaviorSet = GetFamilyBehaviorUtil.getFamilyBehavior(predictedFamily);
                //样本的特征
                Set<String> sampleBehaviorSet = Util.convertToBehaviors(apiList);
                //取交集
                Set<String> resultSet = SetIntersectionUtil.getSetIntersection(familyBehaviorSet,sampleBehaviorSet);
                //resultMap.put("familyBehaviorSet",familyBehaviorSet);
                //resultMap.put("sampleBehaviorSet",sampleBehaviorSet);
                Map behaviorSetMap = new HashMap();
                behaviorSetMap.put("behaviorSet",resultSet);
                String behaviorSetPath = saveAPIFileUtil.writeObjectFile(behaviorSetMap,sampleId,"behaviorSet");
                result.setBehaviorCharacter(behaviorSetPath);
                resultMap.put("behaviorSetPath",behaviorSetPath);
                resultMapper.insertResult(result);
                return resultMap;
            }

        }

        return null;
    }

    @Override
    public String getPredictFamily(Map map) {
        String predictFamily = resultMapper.getPredictFamily(map);
        return predictFamily;
    }

    @Override
    public Map getTree(Map map) {
        String treePath = resultMapper.getTree(map);
        Map resultData = ReadFileUtil.readSampleAPIFile(treePath);
        return resultData;
    }

    @Override
    public Map getBehaviorCharacter(Map map) {
        String behaviorCharacterPath = resultMapper.getBehaviorCharacter(map);
        Map resultData = ReadFileUtil.readSampleAPIFile(behaviorCharacterPath);
        return resultData;
    }

    @Override
    public Map getFamilySimilarity(Map map) {
        String familySimilarityPath = resultMapper.getFamilySimilarity(map);
        Map resultData = ReadFileUtil.readSampleAPIFile(familySimilarityPath);
        return resultData;
    }

}
