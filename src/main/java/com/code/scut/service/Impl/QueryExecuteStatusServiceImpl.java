package com.code.scut.service.Impl;

import com.alibaba.fastjson.JSONObject;
import com.code.scut.dao.SampleMapper;
import com.code.scut.entity.Sample;
import com.code.scut.service.QueryExecuteStatusService;
import com.code.scut.utils.DateConversionUtil;
import com.code.scut.utils.ExecutePythonUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @ClassName queryExecuteStatusServiceImpl
 * @Description 查询执行状态服务实现
 * @Author lilihui
 * @Date 2020/3/26 15:52
 * @Version 1.0
 */
@Service
public class QueryExecuteStatusServiceImpl implements QueryExecuteStatusService {
    @Autowired
    private SampleMapper sampleMapper;

    @Override
    public Map queryExecuteStatus(Map<String, Integer> map) {
        int userId = map.get("userId");
        int taskId = map.get("taskId");

        //调用python脚本来访问vpn
        //python文件路径
        String pythonFilePath = "E:\\queryStatus.py";
        String txt = ExecutePythonUtil.executePython(taskId+"",pythonFilePath);
        JSONObject resultJson = (JSONObject) JSONObject.parse(txt);
        Map<String,Object> data = (Map<String, Object>) resultJson.get("task");

        String status = data.get("status").toString();
        String added_on = data.get("added_on").toString();
        //转换上传时间
        String uploadTimeStr = added_on.substring(0,added_on.length()-3);
        //Date uploadDate = DateConversionUtil.StringToDate(uploadTimeStr);
        //获取开始执行时间和完成时间
        Object started_onObject = data.get("started_on");
        String started_on = null;
        if (started_onObject != null){
            started_on = started_onObject.toString();
        }
        Object completed_onObject = data.get("completed_on");
        String completed_on = null;
        if (completed_onObject != null){
            completed_on = completed_onObject.toString();
        }
        String startExectueTimeStr = null;
        String endExecuteTimeStr = null;
        if (started_on != null){
            startExectueTimeStr = started_on.substring(0,started_on.length()-3);
        }
        if (completed_on != null){
            endExecuteTimeStr = completed_on.substring(0,completed_on.length()-3);
        }

        //md5
        Map<String,String> sample = (Map<String, String>) data.get("sample");
        String md5 = sample.get("md5");

        Map resultMap = new HashMap();
        resultMap.put("userId",userId);
        resultMap.put("taskId",taskId);
        resultMap.put("status",status);
        resultMap.put("uploadTimeStr",uploadTimeStr);
        resultMap.put("startExectueTimeStr",startExectueTimeStr);
        resultMap.put("endExecuteTimeStr",endExecuteTimeStr);
        resultMap.put("md5",md5);

        return resultMap;
    }

    @Override
    public void queryStatus(Map map) throws ParseException {
        //首先取出列表
        List<Map> dataList = new ArrayList<>();
        dataList = (List<Map>) map.get("sampleList");
        Map param = new HashMap();
        param.put("userId",dataList.get(0).get("userId"));
        //循环查询状态
        for (int i=0;i<dataList.size();i++){
            if (!dataList.get(i).get("status").toString().equals("executed")){
                //没有执行完的都要查询状态
                param.put("taskId",dataList.get(i).get("taskId"));
                Map result = queryExecuteStatus(param);
                //重新封装数据,检查查出来的状态是不是和现在一样，一样的跳过，不一样的重新插入数据库
                if (!result.get("status").toString().equals(dataList.get(i).get("status").toString())){
                    //状态发生改变
                    Sample sample = new Sample();
                    if (result.get("startExectueTimeStr") != null){
                        sample.setBeginExecuteTime(DateConversionUtil.StringToDate(result.get("startExectueTimeStr").toString()));
                    }
                    if (result.get("status").toString().equals("reported")){
                        sample.setStatus("executed");
                    }else {
                        sample.setStatus(result.get("status").toString());
                    }

                    if (result.get("endExecuteTimeStr") != null){
                        sample.setEndExecuteTime(DateConversionUtil.StringToDate(result.get("endExecuteTimeStr").toString()));
                    }
                    sample.setUserId((Integer) dataList.get(i).get("userId"));
                    sample.setSampleId((Integer) dataList.get(i).get("sampleId"));
                    //更新数据
                    sampleMapper.updateSample(sample);
                }
            }
        }
    }
}
