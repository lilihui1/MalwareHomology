package com.code.scut.service.Impl;

import com.alibaba.fastjson.JSONObject;
import com.code.scut.dao.SampleMapper;
import com.code.scut.entity.Sample;
import com.code.scut.enums.FileSuffix;
import com.code.scut.service.SampleService;
import com.code.scut.utils.*;
import freemarker.template.TemplateException;
import org.apache.tomcat.jni.Mmap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.text.ParseException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @ClassName SampleServiceImpl
 * @Description 样本服务实现
 * @Author lilihui
 * @Date 2020/3/27 12:16
 * @Version 1.0
 */
@Service
public class SampleServiceImpl implements SampleService {

    @Autowired
    private SampleMapper sampleMapper;
    @Autowired
    private SaveAPIFileUtil saveAPIFileUtil;

    @Override
    public int insertSample(Map map) throws ParseException {
        Sample sample = new Sample();
        if (map.get("startExectueTimeStr") != null){
            sample.setBeginExecuteTime(DateConversionUtil.StringToDate(map.get("startExectueTimeStr").toString()));
        }
        if (map.get("endExecuteTimeStr") != null){
            sample.setEndExecuteTime(DateConversionUtil.StringToDate(map.get("endExecuteTimeStr").toString()));
        }
        if (map.get("apiPath") != null){
            sample.setApiPath(map.get("apiPath").toString());
        }
        sample.setFileName(map.get("fileName").toString());
        sample.setFileType(map.get("filetype").toString());
        sample.setFileSize(map.get("fileSize").toString());
        sample.setValid(map.get("valid").toString());
        if (map.get("stand").toString().equals("unStand")){
            sample.setTaskId(Integer.valueOf(map.get("taskId").toString()));
            sample.setUploadTime(DateConversionUtil.StringToDate(map.get("uploadTimeStr").toString()));
        }
        if (map.get("stand").toString().equals("stand")){
            //对应上传的是API序列日志文件
            sample.setUploadTime((Date) map.get("uploadTimeStr"));
        }


        sample.setUserId(Integer.valueOf(map.get("userId").toString()));


        sample.setStatus(map.get("status").toString());
        sample.setMd5(map.get("md5").toString());
        sample.setPredictStatus(map.get("predictStatus").toString());

        int result = sampleMapper.insertSample(sample);

        return result;
    }

    @Override
    public int updateSampleStatus(Map map) {
        /**插入更新状态*/
        int result = sampleMapper.updateSampleStatus(map);
        return result;
    }

    @Override
    public int updateSamplePredictStatus(Map map) {
        /**插入更新状态*/
        int result = sampleMapper.updateSamplePredictStatus(map);
        return result;
    }

    @Override
    public int deleteSample(Map map) {
        int result = sampleMapper.deleteSample(map);
        return result;
    }

    @Override
    public Sample getSampleById(Map map) {
        Sample sample = sampleMapper.getSampleById(map);
        return sample;
    }

//    @Override
//    public String getAPIFile(Map map) {
//        //获取文件存储的路径
//        String filePath = sampleMapper.getAPIPath(map);
//        //读取文件内容
//        String result = ReadFileUtil.readDOCXFile(filePath);
//        //去除莫名其妙的空白占位符
////        String resultString = StringUtil.replaceBank(result);
////        String regEx = "( ){0,}";
////        Pattern p = Pattern.compile(regEx);
////        Matcher m = p.matcher(resultString);
////        //替换与模式匹配的所有字符（即非数字的字符将被""替换）
////        String resutl = m.replaceAll("").trim();
//        //resultString = resultString.replaceAll("\\s*","");
//        return result;
//    }

    @Override
    public Map getReport(Map map) {
        /**传入的参数有：userId、sampleId、status、taskId*/
        int userId = Integer.valueOf(map.get("userId").toString());
        int taskId = Integer.valueOf(map.get("taskId").toString());
        //调用python脚本来访问vpn
        //python文件路径
        String pythonFilePath = "E:\\query.py";
        String txt = ExecutePythonUtil.executePython(taskId+"",pythonFilePath);
        //将得到的结果转成json对象
        JSONObject resultJson = (JSONObject) JSONObject.parse(txt);
        //处理没有API的情况
        Map<String,Object> data = (Map<String, Object>) resultJson.get("behavior");
        return data;
    }

    @Override
    public int getTaskId(Map map) {
        /**传入的参数有：userId、sampleId、status*/
        int taskId = sampleMapper.getSampleTaskId(map);
        return taskId;
    }

    @Override
    public int updateSampleAPIPath(Map map,Map param) {

        Map resultMap = new HashMap();
        /**传入未经过处理的报告map*/
        List<Map> processtree = (List<Map>) map.get("processtree");
        String pid = processtree.get(0).get("pid").toString();
        Map apistats = (Map) map.get("apistats");
        Map apiStatus = (Map) apistats.get(pid);
        List<Map> processes = (List<Map>) map.get("processes");
        List<Map> calls = (List<Map>) processes.get(0).get("calls");
        String process_name = processes.get(0).get("process_name").toString();
        //去掉后缀
        String fileName = process_name.substring(0,process_name.lastIndexOf("."));
        resultMap.put("fileName",fileName);
        resultMap.put("apiStatus",apiStatus);
        resultMap.put("calls",calls);
        //把resultMap保存进文件里
        String pathName = saveAPIFileUtil.saveSampleAPIFile(resultMap);
//        String pathName ="E:\\\\save\\\\" + fileName + ".doc";
//        Map objectMap = new HashMap();
//        String apiStatusStr = StringAndMapUtil.getMapToString(apiStatus);
//        String callsStr = calls.toString();
//        objectMap.put("apiStatus",apiStatusStr);
//        objectMap.put("calls",callsStr);
//
//        try {
//            FreemarkeExportrWordUtil.doExport(pathName,objectMap);
//        } catch (IOException | TemplateException e) {
//            e.printStackTrace();
//        }

        //把路径存进数据库里
        param.put("pathName",pathName);
        int result = sampleMapper.updateSampleAPIPath(param);

        return result;
    }

    @Override
    public Map getSampleAPIFile(Map map) {
        //获取文件存储的路径
        String filePath = sampleMapper.getAPIPath(map);
        //判断taskId是不是null
        Integer taskId = sampleMapper.getSampleTaskId(map);
        String fileType = sampleMapper.getFileType(map);
        Map resultMap = new HashMap();
        if (taskId.equals(0)){
            //获取的是上传的API序列文件
            //读取文件内容
            if (FileSuffix.TXT.equals(fileType.toUpperCase())){
                resultMap = ReadFileUtil.readSampleAPIFile(filePath);
            }
            else {
                String result = ReadFileUtil.readDOCXFile(filePath);
                //去除莫名其妙的空白占位符
                String resultString = StringUtil.replaceBank(result);
                String regEx = "( ){0,}";
                Pattern p = Pattern.compile(regEx);
                Matcher m = p.matcher(resultString);
                //替换与模式匹配的所有字符（即非数字的字符将被""替换）
                String resutl = m.replaceAll("").trim();
                JSONObject jsonObject1 =JSONObject.parseObject(result);
                resultMap = jsonObject1;
            }

        }
        else {
            //读取文件内容
            resultMap = ReadFileUtil.readSampleAPIFile(filePath);
        }



        return resultMap;
    }

    @Override
    public Map getSampleList(Map map) {
        Map resultMap = new HashMap();
        List<Sample> sampleList = sampleMapper.getSampleList(map);
        //进行分页返回
        int pageSize = (int) map.get("pageSize");
        int pageIndex = (int) map.get("pageIndex");
        //总页数
        int totalNum = sampleList.size();
        int totalPage = totalNum % pageSize == 0 ? totalNum / pageSize : totalNum / pageSize + 1;
        //对应list的第几条开始
        resultMap.put("totalPage",totalPage);
        int fromIndex = pageSize*(pageIndex-1);
        int toIndex = 0;
        if ((fromIndex + pageSize) >= totalNum){
            toIndex = sampleList.size();
        }else {
            toIndex = fromIndex +  pageSize;
        }
        if(fromIndex>toIndex){
            resultMap.put("sampleList",Collections.emptyList());

            return resultMap;
        }
        ListSortUtil.listSort(sampleList);
        resultMap.put("sampleList",sampleList.subList(fromIndex,toIndex));
        return resultMap;

    }

    @Override
    public String getMD5(Map map) {
        String md5 = sampleMapper.getMD5(map);
        return md5;
    }

    @Override
    public int updateSample(Sample sample) {
        int result = sampleMapper.updateSample(sample);
        return result;
    }

    @Override
    public String getAPIPath(Map map) {
        String path = sampleMapper.getAPIPath(map);
        return path;
    }
}
