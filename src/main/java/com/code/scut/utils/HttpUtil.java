package com.code.scut.utils;

import com.alibaba.fastjson.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicHeader;
import org.apache.http.util.CharArrayBuffer;
import org.apache.http.util.EntityUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.Multipart;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.Charset;
import java.util.*;

/**
 * @ClassName HttpUtil
 * @Description TODO
 * @Author ASUS
 * @Date 2020/5/1 20:08
 * @Version 1.0
 */
public class HttpUtil {
    /**
     * 向指定URL发送GET方法的请求
     *
     * @param url
     *            发送请求的URL
     * @param params
     *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
     *  @param extraHeardInfo
     *            头部附加请求信息
     * @return URL 所代表远程资源的响应结果
     */
    public static String sendGet(String url, HashMap<String, String> params, HashMap<String,String> extraHeardInfo) {
        StringBuffer result = new StringBuffer();
        StringBuffer sBuffer=new StringBuffer();
        BufferedReader in = null;
        String urlNameString = url;
        try {
            if(params!=null){
                Set<String> paramNameSet=params.keySet();
                for(String name:paramNameSet) {
                    sBuffer.append(name+"="+params.get(name)+"&");
                }
                urlNameString  += "?" + sBuffer.toString();
            }

            URL realUrl = new URL(urlNameString);
            // 打开和URL之间的连接
            URLConnection connection = realUrl.openConnection();
            // 设置通用的请求属性
            connection.setRequestProperty("accept", "*/*");
            connection.setRequestProperty("connection", "Keep-Alive");
            connection.setRequestProperty("user-agent",
                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            if(extraHeardInfo != null){
                Set<String> attributes = extraHeardInfo.keySet();
                for(String attr:attributes){
                    connection.setRequestProperty(attr,extraHeardInfo.get(attr));
                }
            }
            // 建立实际的连接
            connection.connect();
            // 获取所有响应头字段
            Map<String, List<String>> map = connection.getHeaderFields();
            // 遍历所有的响应头字段
            for (String key : map.keySet()) {
                //  System.out.println(key + "--->" + map.get(key));
            }
            // 定义 BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(
                    connection.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
                // System.out.println(line);
            }
        } catch (Exception e) {
            System.out.println("发送GET请求出现异常！" + e);
            e.printStackTrace();
        }
        // 使用finally块来关闭输入流
        finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return result.toString();
    }
    public static String sendPost(String url, MultipartFile file, HashMap<String,String> extraHeardInfo){
        String result = "";
        CloseableHttpClient client = null;
        try {


            client = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setHeader(new BasicHeader("Content-Type", "multipart/form-data; boundary=--------------------------143918593942938641126581"));
            httpPost.setHeader(new BasicHeader("Accept", "*/*"));
            httpPost.setHeader("Authorization","Bearer 2yIq75P0-Ch_HO1dZqgdDw");

            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            builder.setCharset(Charset.forName("utf-8"));
            builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);//加上此行代码解决返回中文乱码问题
            builder.addBinaryBody(file.getOriginalFilename(), file.getInputStream(), ContentType.MULTIPART_FORM_DATA, file.getOriginalFilename());// 文件流


            HttpEntity entity = builder.build();
            httpPost.setEntity(entity);

            HttpResponse response = client.execute(httpPost);// 执行提交
            HttpEntity responseEntity = response.getEntity();
            if (responseEntity != null) {
                // 将响应内容转换为字符串
                result = EntityUtils.toString(responseEntity, Charset.forName("UTF-8"));
            }

        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                client.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return result;
    }

    public static String sendPost2(String url, MultipartFile file, HashMap<String,String> extraHeardInfo){
        String BOUNDARY = UUID.randomUUID().toString().toLowerCase().replaceAll("-", "");// 边界标识
        String PREFIX = "--";// 必须存在
        String LINE_END = "\r\n";
        HttpURLConnection conn = null;
        InputStream input = null;
        OutputStream os = null;
        BufferedReader br = null;
        StringBuffer buffer = null;
        try{
            URL postUrl = new URL(url);
            conn = (HttpURLConnection) postUrl.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setConnectTimeout(1000 * 10);
            conn.setReadTimeout(1000 * 10);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Accept", "*/*");
            conn.setRequestProperty("Connection", "keep-alive");
            conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)");
            conn.setRequestProperty("Charset", "UTF-8");
            conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);
            conn.connect();

            // 往服务器端写内容 也就是发起http请求需要带的参数
            os = new DataOutputStream(conn.getOutputStream());
            // 请求上传文件部分
            Map<String, MultipartFile> requestFile = new HashMap<>();
            requestFile.put(file.getOriginalFilename(),file);
            writeFile(requestFile, BOUNDARY,os);
            // 请求结束标志
            String endTarget = PREFIX + BOUNDARY + PREFIX + LINE_END;
            os.write(endTarget.getBytes());
            os.flush();
            if(conn.getResponseCode()==200){
                input = conn.getInputStream();
            }else{
                input = conn.getErrorStream();
            }

            br = new BufferedReader(new InputStreamReader( input, "UTF-8"));
            buffer = new StringBuffer();
            String line = null;
            while ((line = br.readLine()) != null) {
                buffer.append(line);
            }
            return buffer.toString();
        }catch (Exception e){

        }finally {
            try {
                if (conn != null) {
                    conn.disconnect();
                    conn = null;
                }

                if (os != null) {
                    os.close();
                    os = null;
                }

                if (br != null) {
                    br.close();
                    br = null;
                }
            } catch (IOException ex) {
            }

        }
        return buffer.toString();
    }
    private static void writeFile(Map<String, MultipartFile> requestFile,String BOUNDARY,
                                  OutputStream os) throws Exception {
        InputStream is = null;
        try{
            if (requestFile == null || requestFile.isEmpty()) {

            } else {
                StringBuilder requestParams = new StringBuilder();
                Set<Map.Entry<String, MultipartFile>> set = requestFile.entrySet();
                Iterator<Map.Entry<String, MultipartFile>> it = set.iterator();
                while (it.hasNext()) {
                    Map.Entry<String, MultipartFile> entry = it.next();
                    if(entry.getValue() == null){//剔除value为空的键值对
                        continue;
                    }
                    requestParams.append("--").append(BOUNDARY).append("\r\n");
                    requestParams.append("Content-Disposition: form-data; name=\"")
                            .append(entry.getKey()).append("\"; filename=\"")
                            .append(entry.getValue().getName()).append("\"")
                            .append("\r\n");
                    requestParams.append("Content-Type:")
                            .append(entry.getValue().getContentType())
                            .append("\r\n");
                    requestParams.append("Content-Transfer-Encoding: 8bit").append(
                            "\r\n");
                    requestParams.append("\r\n");// 参数头设置完以后需要两个换行，然后才是参数内容

                    os.write(requestParams.toString().getBytes());
                    os.write(entry.getValue().getBytes());

                    os.write("\r\n".getBytes());
                    os.flush();
                }
            }
            //System.out.println(msg);
        }catch(Exception e){
            throw new Exception(e);
        }finally{
            try{
                if(is!=null){
                    is.close();
                }
            }catch(Exception e){
                throw new Exception(e);
            }
        }
    }
    /**
     * Get Request
     * @return
     * @throws Exception
     */
    public static String doGet() throws Exception {
        String url = "http://222.201.187.174:1337/tasks/report/1723";
        CloseableHttpClient client = null;
        CloseableHttpResponse response = null;
        String result;
        try {
           // HttpHost proxy = new HttpHost("192.168.0.114",8080);
            client = HttpClients.createDefault();
            URIBuilder uriBuilder = new URIBuilder(url);
            HttpGet httpGet = new HttpGet(url);
            httpGet.setHeader(new BasicHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8"));
            httpGet.setHeader(new BasicHeader("Accept", "text/plain;charset=utf-8"));
            httpGet.setHeader("Authorization","Bearer 2yIq75P0-Ch_HO1dZqgdDw");

            response = client.execute(httpGet);
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode==200){
                HttpEntity entity = response.getEntity();
                result = entityToString(entity);
                JSONObject jsonObject = JSONObject.parseObject(result);
                return result;
            }
        }catch (Exception e){

        }finally {
            response.close();
            client.close();
        }
        return null;
    }
    public static String entityToString(HttpEntity entity) throws IOException {
        String result = null;
        if(entity != null)
        {
            long lenth = entity.getContentLength();
            if(lenth != -1 && lenth < 2048)
            {
                result = EntityUtils.toString(entity,"UTF-8");
            }else {
                InputStreamReader reader1 = new InputStreamReader(entity.getContent(), "UTF-8");
                CharArrayBuffer buffer = new CharArrayBuffer(2048);
                char[] tmp = new char[1024];
                int l;
                while((l = reader1.read(tmp)) != -1) {
                    buffer.append(tmp, 0, l);
                }
                result = buffer.toString();
            }
        }
        return result;
    }
}
