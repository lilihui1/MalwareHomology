package com.code.scut.utils;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @ClassName SaveAPIFileUtil
 * @Description 保存文件
 * @Author lilihui
 * @Date 2020/3/27 20:08
 * @Version 1.0
 */
@Component
public class SaveAPIFileUtil {

    @Value("${customValue.pathName}")
    private String pathName;

    public String getPathName() {
        return pathName;
    }

    public String saveAPITxt(MultipartFile file){
        //保存txt类型的
        //首先需要先封装
        String fileName1 = file.getOriginalFilename();
        //去除.txt
        String regEx = "(.txt){0,}";
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(fileName1);
        String fileName = m.replaceAll("").trim();

        String fileContent = convertStreamToString(file);
        String [] apis = fileContent.split("\\,");
        List<String> apiList = Arrays.asList(apis);
        //封装数据保存
        List<Map> calls = new ArrayList<>();
        for (String api:apiList){
            //循环放进去
            Map map = new HashMap();
            map.put("api",api);
            map.put("return_value",null);
            map.put("stacktrace",null);
            map.put("nt_status",null);
            map.put("flags",null);
            map.put("arguments",null);
            map.put("last_error",null);
            map.put("time",null);
            map.put("category",null);
            map.put("tid",null);
            map.put("status",null);
            calls.add(map);
        }
        Map apiStatus = new HashMap();
        apiStatus = statisticList(apiList);
        Map resultMap = new HashMap();
        resultMap.put("calls",calls);
        resultMap.put("apiStatus",apiStatus);
        resultMap.put("fileName",fileName);
        //保存文件
        String pathName = saveSampleAPIFile(resultMap);
        return pathName;
    }
    public Map statisticList(List<String> list){
        Map apiStatus = new HashMap();
        //去重
        List<String> listTemp = new ArrayList<>();
        for(int i=0;i<list.size();i++) {
            if (!listTemp.contains(list.get(i))) {
                listTemp.add(list.get(i));
            }
        }
        //计算次数
        for (String str:listTemp){
            apiStatus.put(str,repeatTime(list,str));
        }
        return apiStatus;
    }
    public int repeatTime(List<String> list, String text){
        int num = 0;
        for (String str:list){
            if (str.equals(text))
                num++;
        }
        return num;
    }

    public String convertStreamToString(MultipartFile file){
        StringBuilder sb = new StringBuilder();
        try (InputStream inputStream = file.getInputStream()) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line = null;
            try {
                while ((line = reader.readLine()) != null) {
                    sb.append(line + "/n");
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return sb.toString();
    }

    public  String saveAPIFile(MultipartFile file){
        String path = this.getPathName();
        String fileName = file.getOriginalFilename();
        path = path + "\\\\" + fileName;
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(path);
            fos.write(file.getBytes()); // 写入文件
            return path;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public String saveSampleAPIFile(Map map){
        String fileName = map.get("fileName").toString() + ".doc";
        //保存的路径名称
        String pathName = this.getPathName() + "\\\\" + fileName;
        FileOutputStream fos = null;
        ObjectOutputStream oos = null;
        try {
            // 创建文件
            File file = new File(pathName);
            if (file.exists() && file.isFile()) {
                file.delete();
            }
            file.createNewFile();

            fos = new FileOutputStream(file);
            oos = new ObjectOutputStream(fos);
            oos.writeObject(map);
            oos.flush();
            oos.close();

            return pathName;

    } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public  String writeObjectFile(Map data,Integer sampleId,String name){
        String fileName = sampleId + name + ".doc";
        //保存的路径名称
        String pathName = this.getPathName() + "\\\\" + fileName;
        FileOutputStream fos = null;
        ObjectOutputStream oos = null;
        try {
            // 创建文件
            File file = new File(pathName);
            if (file.exists() && file.isFile()) {
                file.delete();
            }
            file.createNewFile();

            fos = new FileOutputStream(file);
            oos = new ObjectOutputStream(fos);
            oos.writeObject(data);
            oos.flush();
            oos.close();
            return pathName;

        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}
