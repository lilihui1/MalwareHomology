package com.code.scut.controller;

import com.alibaba.fastjson.JSONObject;
import com.code.scut.common.JsonMessage;
import com.code.scut.entity.Sample;
import com.code.scut.service.ResultService;
import com.code.scut.service.SampleService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @ClassName GetMessageController
 * @Description 获取信息的接口
 * @Author lilihui
 * @Date 2020/3/29 11:09
 * @Version 1.0
 */
@RestController
@RequestMapping("/malware")
public class GetMessageController {

    @Autowired
    private SampleService sampleService;
    @Autowired
    private ResultService resultService;

    /** 记录日志 */
    private static final Logger logger = LoggerFactory.getLogger(GetMessageController.class);

    @RequestMapping(value = "/getBaseInfo",method = RequestMethod.POST)
    public JsonMessage getBaseInfo(@RequestBody Map param){
        /**传入的参数有userId、sampleId、status、predictStatus*/
        try{
            Sample sample = sampleService.getSampleById(param);
            if (sample!=null){
                return new JsonMessage(true,"1","成功",sample);
            }
        }catch (Exception e){
            logger.error("context: " + e);
        }
        return new JsonMessage(false,"-1","失败",null);

    }

//    @RequestMapping(value = "/getAPIFile",method = RequestMethod.POST)
//    public JsonMessage getAPIFile(@RequestBody Map param){
//        String status = param.get("status").toString();
//        if (status.equals("executed")){
//            String result = sampleService.getAPIFile(param);
//            JSONObject jsonObject1 =JSONObject.parseObject(result);
//            if ((result!=null)&&(!result.equals(""))){
//                return new JsonMessage(true,"1","成功",jsonObject1);
//            }
//        }
//        return new JsonMessage(false,"-1","失败",null);
//
//    }

    @RequestMapping(value = "/getSampleAPIFile",method = RequestMethod.POST)
    public JsonMessage getSampleAPIFile(@RequestBody Map param){
        String status = param.get("status").toString();
        if (status.equals("executed")){
            Map resultMap = sampleService.getSampleAPIFile(param);
            if (resultMap!=null){
                return new JsonMessage(true,"1","成功",resultMap);
            }
        }
        return new JsonMessage(false,"-1","失败",null);

    }

    @RequestMapping(value = "/getSampleList",method = RequestMethod.POST)
    public JsonMessage getSampleList(@RequestBody Map param){
        /**传入的参数要有：userId、pageSize、pageIndex*/
        Map resultMap = new HashMap();
        resultMap = sampleService.getSampleList(param);
        List<Sample> resultList = (List<Sample>) resultMap.get("sampleList");
        if (!resultList.isEmpty()){
            return new JsonMessage(true,"1","成功",resultMap);
        }
        return new JsonMessage(false,"-1","失败",resultList);
    }

    @RequestMapping(value = "/getReport",method = RequestMethod.POST)
    public JsonMessage getReport(@RequestBody Map param){
        String status = param.get("status").toString();
        //只有执行完才有报告拿
        if (status.equals("executed")){
            //如果数据库有文件路径就不用再去查询一次了
            int taskId = sampleService.getTaskId(param);
            param.put("taskId",taskId);
            String apiPath = sampleService.getAPIPath(param);
            if (apiPath.equals(" ")){
                //是空的说明没有结果
                String path = null;
                Map reportMap = sampleService.getReport(param);

                if (reportMap!=null){
                    //这里需要将获取的东西保存
                    int result = sampleService.updateSampleAPIPath(reportMap,param);
                    path = sampleService.getAPIPath(param);
                    if (result>0){
                        return new JsonMessage(true,"1","成功",path);
                    }
                }
                else {
                    //把路径返回
                    //path = sampleService.getAPIPath(param);
                    //该样本没有API调用
                    return new JsonMessage(true,"1","成功",null);
                }
            }else {
                //不是空的就没必要去拿报告
                return new JsonMessage(true,"1","成功",apiPath);
            }

        }
        return new JsonMessage(false,"-1","失败",null);

    }

    @RequestMapping(value = "/getPredictFamily",method = RequestMethod.POST)
    public JsonMessage getPredictFamily(@RequestBody Map param){
        String predictStatus = param.get("predictStatus").toString();
        String predictFamily;
        if (predictStatus.equals("1")){
            //说明预测完成了
            predictFamily = resultService.getPredictFamily(param);
            return new JsonMessage(true,"1","成功",predictFamily);
        }
        return new JsonMessage(false,"-1","失败",null);
    }
    @RequestMapping(value = "/getTree",method = RequestMethod.POST)
    public JsonMessage getTree(@RequestBody Map param){
        String predictStatus = param.get("predictStatus").toString();
        Map resultMap = new HashMap();
        if (predictStatus.equals("1")){
            //说明预测完成了
            resultMap = resultService.getTree(param);
            if (!resultMap.isEmpty()){
                return new JsonMessage(true,"1","成功",resultMap);
            }
        }
        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/getBehaviorCharacter",method = RequestMethod.POST)
    public JsonMessage getBehaviorCharacter(@RequestBody Map param){
        String predictStatus = param.get("predictStatus").toString();
        Map resultMap = new HashMap();
        if (predictStatus.equals("1")){
            //说明预测完成了
            resultMap = resultService.getBehaviorCharacter(param);
            if (!resultMap.isEmpty()){
                return new JsonMessage(true,"1","成功",resultMap);
            }
        }
        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/getFamilySimilarity",method = RequestMethod.POST)
    public JsonMessage getFamilySimilarity(@RequestBody Map param){
        String predictStatus = param.get("predictStatus").toString();
        Map resultMap = new HashMap();
        if (predictStatus.equals("1")){
            //说明预测完成了
            resultMap = resultService.getFamilySimilarity(param);
            if (!resultMap.isEmpty()){
                return new JsonMessage(true,"1","成功",resultMap);
            }
        }
        return new JsonMessage(false,"-1","失败",null);
    }
}
