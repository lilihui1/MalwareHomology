package com.code.scut.controller;

import com.code.scut.common.JsonMessage;
import com.code.scut.entity.User;
import com.code.scut.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @ClassName UserController
 * @Description 账号管理接口
 * @Author lilihui
 * @Date 2020/4/3 10:29
 * @Version 1.0
 */
@RestController
@RequestMapping("/malware")
public class UserController {

    /** 记录日志 */
    private static final Logger logger = LoggerFactory.getLogger(UserController.class);
    @Autowired
    private UserService userService;

    @RequestMapping(value = "/getAllUser",method = RequestMethod.POST)
    public JsonMessage getAllUser(@RequestBody Map param){
        /**判断是不是管理员，传入的参数有：userId*/
        Integer userId = Integer.valueOf(param.get("userId").toString());
        User user = userService.getUserById(userId);
        String role = user.getRole();
        List<User> resultList = new ArrayList<>();
        if (role.equals("admin")){
            resultList = userService.getUserList(param);
            return new JsonMessage(true,"1","成功",resultList);
        }else {
            //不是管理员
            return new JsonMessage(false,"-1","你不是系统管理员无权查看",null);
        }
    }
    @RequestMapping(value = "/getUserMessage",method = RequestMethod.POST)
    public JsonMessage getUserMessage(@RequestBody Map param){
        Integer userId = Integer.valueOf(param.get("userId").toString());
        User user = userService.getUserById(userId);
        if (user!=null){
            return new JsonMessage(true,"1","成功",user);
        }
        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/updateUserMessage",method = RequestMethod.POST)
    public JsonMessage updateUserMessage(@RequestBody Map params)throws Exception{
        String name = params.get("name").toString();
        String password = params.get("password").toString();
        String email = params.get("email").toString();
        Integer userId = (Integer) params.get("userId");
        String status = params.get("status").toString();
        //这里还要考虑判断一下用户名重复的
        User userTemp = userService.getUserByName(name);
        if (userTemp!=null){
            logger.error("context: "+"名字重复");
            return new JsonMessage(false,"-1","名字重复",null);
        }
        try {
            User user = new User();
            user.setEmail(email);
            user.setName(name);
            user.setPassword(password);
            user.setUserId(userId);
            user.setStatus(status);
            int tempId = userService.updateUserMessage(user);
           if (tempId>0){
               return new JsonMessage(true,"1","成功",tempId);
           }
        }catch (Exception e){
            logger.error("context: "+e);
        }
        return new JsonMessage(false,"-1","失败",null);
    }


    @RequestMapping(value = "/deleteUser",method = RequestMethod.POST)
    public JsonMessage deleteUser(@RequestBody Map param){
        param.put("status","0");
        int result = userService.deleteUser(param);
        if (result>0){
            return new JsonMessage(true,"1","成功",result);
        }
        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/updatePassword",method = RequestMethod.POST)
    public JsonMessage updatePassword(@RequestBody Map param){
        String oldPassword = param.get("oldPassword").toString();
        String newPassword = param.get("newPassword").toString();
        Integer userId = (Integer) param.get("userId");
        User user = userService.getUserById(userId);
        //判断密码是否重复
        if (user.getPassword().equals(oldPassword)){
            //更新信息
            int result = userService.updatePassword(newPassword);
            return new JsonMessage(true,"1","成功",result);
        }
        else {
            return new JsonMessage(false,"-1","原密码不正确",null);
        }
    }

}
