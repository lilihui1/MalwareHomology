package com.code.scut.controller;

import com.code.scut.common.JsonMessage;
import com.code.scut.entity.User;
import com.code.scut.service.IMailService;
import com.code.scut.service.UserService;
import com.code.scut.utils.RandomCodeUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * @ClassName FindPasswordController
 * @Description TODO
 * @Author ASUS
 * @Date 2020/4/28 18:27
 * @Version 1.0
 */
@RestController
public class FindPasswordController {
    /** 记录日志 */
    private static final Logger logger = LoggerFactory.getLogger(FindPasswordController.class);

    @Autowired
    private IMailService iMailService;

    @Autowired
    private UserService userService;

    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @RequestMapping(value = "/findPassword",method = RequestMethod.POST)
    public JsonMessage findPassword(@RequestBody Map param){
        /**传入的参数有：name,email*/
        String email = param.get("email").toString();
        String name = param.get("name").toString();
        try{
            //查密码
            User user = userService.getUserByName(name);
            if (user!=null){
                //比对name和email
                if (user.getName().equals(name)&&user.getEmail().equals(email)){
                    //把发送到目标邮箱
                    String randomCode = RandomCodeUtil.getItemID(4);
                    iMailService.sendSimpleMail(email,"随机码",randomCode);
                    //把code存进数据库
                    user.setStatus(randomCode);
                    userService.updateUserMessage(user);
                    return new JsonMessage(true,"1","成功",null);
                }
                else {
                    return new JsonMessage(false,"-1","输入的账号和邮箱不匹配！",null);
                }
            }
        }catch(Exception e){
            logger.error("context: "+e);
        }

        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/resetStatus",method = RequestMethod.POST)
    public JsonMessage resetStatus(@RequestBody Map param){
        String name = param.get("name").toString();
        if (name.equals("")){
            //空的话就直接返回
            return new JsonMessage(true,"1","成功",null);
        }
        else {
            try {
                User user = userService.getUserByName(name);
                if (user!=null){
                 user.setStatus("1");
                 userService.updateUserMessage(user);
                 return new JsonMessage(true,"1","成功",null);
                }
            }catch (Exception e){
                logger.error("context: "+e);
            }
        }
        return new JsonMessage(false,"-1","失败",null);
    }

    @RequestMapping(value = "/resetPassword",method = RequestMethod.POST)
    public JsonMessage resetPassword(@RequestBody Map param){
        /**传入的参数有：name,email,randomCode,password*/
        String email = param.get("email").toString();
        String name = param.get("name").toString();
        String randomCode = param.get("randomCode").toString();
        String password = param.get("password").toString();

        try{
            //获取用户
            User user = userService.getUserByName(name);
            if (user!=null){
                //比对code
                if (user.getStatus().equals(randomCode)){
                    user.setStatus("1");
                    user.setPassword(bCryptPasswordEncoder.encode(password));
                    userService.updateUserMessage(user);
                    return new JsonMessage(true,"1","成功",null);
                }
                else {
                    return new JsonMessage(false,"-1","输入的验证码不正确！",null);
                }
            }
        }catch(Exception e){
            logger.error("context: "+e);
        }
        return new JsonMessage(false,"-1","失败",null);
    }


}
